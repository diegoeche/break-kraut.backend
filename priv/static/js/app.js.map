{"version":3,"sources":["web/static/js/app.js","web/static/js/socket.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,CAAC,CAAC,QAAQ,CAAC,CAAC,KAAK,CAAC,YAAY;AAC5B,MAAI,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC,uBAAuB,CAAC;AACjE,MAAI,GAAG,GAAG,QAAQ,CAAC,MAAM;AACzB,SAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;;AAEvB,OAAK,IAAI,CAAC,GAAC,CAAC,EAAE,CAAC,GAAC,GAAG,EAAE,EAAE,CAAC,EAAE;AACxB,WAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1B,YAAQ,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,OAAO,EAAE,UAAS,KAAK,EAAC;AACnD,UAAI,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC;AAC/C,UAAG,OAAO,KAAK,IAAI,IAAI,OAAO,CAAC,OAAO,CAAC,EAAC;AACtC,YAAI,CAAC,UAAU,CAAC,MAAM,EAAE;OACzB,CAAC;AACF,WAAK,CAAC,cAAc,EAAE;AACtB,aAAO,KAAK;KACb,EAAE,KAAK,CAAC;GACV;CACF,CAAC,CAAC;;;;;;;;;;;;;;;6CCbkB,oCAAoC;;AAEzD,IAAI,MAAM,GAAG,0CAAW,SAAS,EAAE,EAAC,MAAM,EAAE,EAAC,KAAK,EAAE,MAAM,CAAC,SAAS,EAAC,EAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8CvE,MAAM,CAAC,OAAO,EAAE;;;AAGhB,IAAI,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC;AAClD,OAAO,CAAC,IAAI,EAAE,CACX,OAAO,CAAC,IAAI,EAAE,cAAI,EAAI;AAAE,SAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAAC;CAAE,CAAC,CACnE,OAAO,CAAC,OAAO,EAAE,cAAI,EAAI;AAAE,SAAO,CAAC,GAAG,CAAC,gBAAgB,EAAE,IAAI,CAAC;CAAE,CAAC;;qBAErD,MAAM","file":"priv/static/js/app.js","sourcesContent":["// Although ^=parent is not technically correct,\n// we need to use it in order to get IE8 support.\n$(document).ready(function () {\n  var elements = document.querySelectorAll('[data-submit^=parent]')\n  var len = elements.length\n  console.info(elements);\n\n  for (var i=0; i<len; ++i) {\n    console.info(elements[i]);\n    elements[i].addEventListener('click', function(event){\n      var message = this.getAttribute(\"data-confirm\")\n      if(message === null || confirm(message)){\n        this.parentNode.submit()\n      };\n      event.preventDefault()\n      return false\n    }, false)\n  }\n});\n","// NOTE: The contents of this file will only be executed if\n// you uncomment its entry in \"web/static/js/app.js\".\n\n// To use Phoenix channels, the first step is to import Socket\n// and connect at the socket path in \"lib/my_app/endpoint.ex\":\nimport {Socket} from \"deps/phoenix/web/static/js/phoenix\"\n\nlet socket = new Socket(\"/socket\", {params: {token: window.userToken}})\n\n// When you connect, you'll often need to authenticate the client.\n// For example, imagine you have an authentication plug, `MyAuth`,\n// which authenticates the session and assigns a `:current_user`.\n// If the current user exists you can assign the user's token in\n// the connection for use in the layout.\n//\n// In your \"web/router.ex\":\n//\n//     pipeline :browser do\n//       ...\n//       plug MyAuth\n//       plug :put_user_token\n//     end\n//\n//     defp put_user_token(conn, _) do\n//       if current_user = conn.assigns[:current_user] do\n//         token = Phoenix.Token.sign(conn, \"user socket\", current_user.id)\n//         assign(conn, :user_token, token)\n//       else\n//         conn\n//       end\n//     end\n//\n// Now you need to pass this token to JavaScript. You can do so\n// inside a script tag in \"web/templates/layout/app.html.eex\":\n//\n//     <script>window.userToken = \"<%= assigns[:user_token] %>\";</script>\n//\n// You will need to verify the user token in the \"connect/2\" function\n// in \"web/channels/user_socket.ex\":\n//\n//     def connect(%{\"token\" => token}, socket) do\n//       # max_age: 1209600 is equivalent to two weeks in seconds\n//       case Phoenix.Token.verify(socket, \"user socket\", token, max_age: 1209600) do\n//         {:ok, user_id} ->\n//           {:ok, assign(socket, :user, user_id)}\n//         {:error, reason} ->\n//           :error\n//       end\n//     end\n//\n// Finally, pass the token on connect as below. Or remove it\n// from connect if you don't care about authentication.\n\nsocket.connect()\n\n// Now that you are connected, you can join channels with a topic:\nlet channel = socket.channel(\"topic:subtopic\", {})\nchannel.join()\n  .receive(\"ok\", resp => { console.log(\"Joined successfully\", resp) })\n  .receive(\"error\", resp => { console.log(\"Unable to join\", resp) })\n\nexport default socket\n"]}